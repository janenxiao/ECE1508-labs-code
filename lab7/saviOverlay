#!/usr/bin/env python
import os
import sys
import time
import random
import paramiko
import logging

import inspect

import novaclient.v1_1.client as novaClient
# import novaclient.v1_1

# Config file, put your credentials in overlay_config.py
import overlay_config

# Set logging format and logging level
# Can change INFO to DEBUG for more information, or WARNING for less information
logging.basicConfig(format='%(asctime)s %(module)s %(levelname)s: %(message)s')
logger = logging.getLogger(__name__) # Get logger for *this* module
# logger.setLevel(logging.INFO)
logger.setLevel(logging.DEBUG)

# List of used VNIs in the overlay
USED_VNIS = []

################################################################################
# HELPER FUNCTIONS (PRE-MADE FOR STUDENTS)
################################################################################

# Waits until a given VM is active
#
# Input:
#   - vmObj: A VM object created by Nova
def waitUntilVMActive(vmObj):
    while vmObj.status != 'ACTIVE':
        logger.debug("Waiting for VM %s to become active..." % vmObj.name)
        time.sleep(5)
        vmObj.get() # Re-sync object state w/ OpenStack

    logger.info("VM %s is now active" % vmObj.name)

# Sets up an SSH session with a target host
#
# Input:
#   - targetIP: The target host's IP address
#   - username: The username to log-in with
#   - password: The password associated with the username
#
# Returns:
#   - A Paramiko SSH session object
def getSSHSession(targetIP, username, password):
    # Set up SSH
    sshSession = paramiko.SSHClient()
    sshSession.set_missing_host_key_policy(paramiko.AutoAddPolicy())

    while True:
        try:
            sshSession.connect(targetIP, username = username, password = password)
            logger.debug("SSH to %s successful" % targetIP)
            break
        except Exception as e:
            logger.debug("Waiting for SSH daemon to come up in %s..." % targetIP)
            time.sleep(5)

    return sshSession

# Runs a command over an established SSH session
#
# Input:
#   - sshSession: An active SSH session to a VM
#   - command: A string command to run within the VM
#
# Returns:
#   - A tuple containing strings of stdout and stderr (stdout, stderr), or
#     else None if an exception occurred from SSH
def runCommandOverSSH(sshSession, command):
    assert type(sshSession) is paramiko.client.SSHClient,\
            "'sshSession' is type %s" % type(sshSession)
    assert type(command) in (str, unicode), "'command' is type %s" % type(command)
    logger.debug("Running command in host %s" % sshSession._transport.sock.getpeername()[0])
    logger.debug("\t\"%s\"" % command)

    try:
        stdin, stdout, stderr = sshSession.exec_command(command)

        # Wait for command to finish (may take a while for long commands)
        while not stdout.channel.exit_status_ready() or \
                not stderr.channel.exit_status_ready():
            time.sleep(1)
    except Exception as e:
        logger.error(e)
        logger.error("ERROR: Unable to execute command over SSH:")
        logger.error("\t%s" % command)

        return None
    else:
        # exec_command() completed successfully
        # Check if command printed anything to stderr
        err = stderr.readlines()
        err = ''.join(err) # Convert to single string
        if err:
            logger.error("%s\n" % err)

        # Check if command printed anything to stdout
        out = stdout.readlines()
        out = ''.join(out) # Convert to single string
        if out:
            logger.debug("%s\n" % out)

        return (out, err)

# Ensures the OVS daemon is up before continuing. If OVS isn't installed in the
# system, it will be installed first. Assumes the host is a Debian-based OS
# using the aptitude package management system.
#
# Input:
#   - sshSession: An active SSH session to a VM
def waitUntilOVSActive(sshSession):
    assert type(sshSession) is paramiko.client.SSHClient,\
            "'sshSession' is type %s" % type(sshSession)

    # Check if OVS is installed, install if it's not
    cmd = "dpkg -l | grep openvswitch"
    stdout, stderr = runCommandOverSSH(sshSession, cmd)
    if not stdout: # dpkg -l didn't find anything
        logger.info("Open vSwitch is not installed, installing now...")
        cmd = "sudo apt-get update && sudo apt-get install -y openvswitch-switch"
        stdout, stderr = runCommandOverSSH(sshSession, cmd)

    cmd = "sudo service openvswitch-switch status"
    stdout, stderr = runCommandOverSSH(sshSession, cmd)
    while "not running" in stdout:
        logger.debug("Waiting for OVS to become active")
        time.sleep(5)
        stdout, stderr = runCommandOverSSH(sshSession, cmd)

# Generates a unique VXLAN Network Identifier (VNI)
# Ensures generated number isn't being used in the overlay
#
# Returns:
#   - A randomly generated number between 1 and 65536
def generateVNI():
    global USED_VNIS

    vni = random.randint(1, 2**16)
    while vni in USED_VNIS:
        vni = random.randint(1, 2**16)

    USED_VNIS.append(vni)
    return vni

# Sets controller for OVS within a switch VM to a TCP endpoint
#
# Input:
#   - switchVMObj: A VM object created by Nova
#   - ctrlEndpoint: A string of the TCP endpoint for setting the OVS controller
#       - Example: "10.20.30.40:6633"
def setController(switchVMObj, ctrlEndpoint):
    logger.info("Setting controller for switch in %s with IP %s" %
                                    (switchVMObj.name, ctrlEndpoint))
    networkName = overlay_config.tenant_name + '-net'

    switchVMIP = switchVMObj.networks.get(networkName)[0]
    switchSSH = getSSHSession(switchVMIP, 'ubuntu', 'savi')

    # Ensure OVS daemon is up and running
    waitUntilOVSActive(switchSSH)

    # Set to OpenFlow 1.0
    # ovsName = "%s-br" % switchVMObj.name
    ovsName = "br1"
    cmd = "sudo ovs-vsctl set bridge %s protocols=OpenFlow10" % ovsName
    runCommandOverSSH(switchSSH, cmd)

    # Set the controller
    cmd = "sudo ovs-vsctl set-controller %s tcp:%s" % (ovsName, ctrlEndpoint)
    runCommandOverSSH(switchSSH, cmd)

################################################################################
# HELPER FUNCTIONS (TO BE COMPLETED BY STUDENTS)
################################################################################

def getNovaClient():
    novaclient = novaClient.Client(
        overlay_config.username,
        overlay_config.password,
        overlay_config.tenant_name,
        overlay_config.auth_url,
        region_name=overlay_config.region,
        no_cache=True)
    return novaclient

# Creates a VM using OpenStack Nova
#
# Input:
#   - vmName: Name of desired VM to be created, must be of type string
#
# Returns:
#   - The VM object created by Nova
def bootVM(vmName, isController=False):
    assert type(vmName) in (str, unicode), "'vmName' is type %s" % type(vmName)

    # Pre-pend vmName with your username
    vmName = overlay_config.username + '-' + vmName

    logger.info("Creating VM %s" % vmName)

    # STUDENTS FILL THIS PART OUT
    nova = getNovaClient()
    flavor = nova.flavors.find(name=overlay_config.flavor)
    if isController:    # if this VM is for the controller, use 'ece361-16.04' image which comes with an OpenFlow controller
        image = nova.images.find(name='ece361-16.04')
    else:       # if this VM is NOT for the controller, use the image suggested in overlay_config
        image = nova.images.find(name=overlay_config.image)
    net_name = overlay_config.tenant_name + '-net'
    net = nova.networks.find(label=net_name)
    vm = nova.servers.create(vmName, image, flavor, key_name=overlay_config.key_name, security_groups=[overlay_config.username], nics=[{'net-id':net.id}])
    waitUntilVMActive(vm)
    # ip = vm.networks.get(net_name)[0]   # get IP of created VM
    # print(ip)
    return vm

# Creates an OVS switch and an internal interface for it, and sets
# the interface's IP to the specified IP address.
# Currently, the default CIDR is /24 for whichever IP is specified.
# The MTU over the created interface is set to 1450 to account for
# the extra headers introduced by VXLAN.
#
# Input:
#   - hostVMObj: A VM object created by Nova
#   - hostOverlayIP: Desired overlay IP for the host
def setOverlayInterface(hostVMObj, hostOverlayIP):
    logger.info("Setting overlay for %s with IP %s" %
                        (hostVMObj.name, hostOverlayIP))
    networkName = overlay_config.tenant_name + '-net'

    hostVMIP = hostVMObj.networks.get(networkName)[0]
    hostSSH = getSSHSession(hostVMIP, 'ubuntu', 'savi')

    # Ensure OVS daemon is up and running
    waitUntilOVSActive(hostSSH)

    # Creates OVS switch with name of host + '-br'
    # ovsName = "%s-br" % hostVMObj.name
    ovsName = "br1"
    cmd = "sudo ovs-vsctl --may-exist add-br %s" % ovsName
    runCommandOverSSH(hostSSH, cmd)

    # STUDENTS FILL THIS PART OUT
    # assign overlay IP to the created OVS switch (bc it represents a host)
    if hostOverlayIP is not None and type(hostOverlayIP) == str:
        # create an internal interface
        ifaceName = "intIface"
        cmd = "sudo ovs-vsctl --may-exist add-port %s %s -- set interface %s type=internal" % (ovsName, ifaceName, ifaceName)
        runCommandOverSSH(hostSSH, cmd)
        # assign overlay IP to the internal interface and set MTU to 1450
        cmd = "sudo ifconfig %s %s/24 mtu 1450 up" % (ifaceName, hostOverlayIP)
        runCommandOverSSH(hostSSH, cmd)


# Connects two nodes as part of an overlay.
# Nodes can be either a host or a switch object, but generally at least
# one of them should be a switch.
#
# Input:
#   - node1: A VM object created by Nova
#   - node2: A VM object created by Nova
def connectNodes(node1, node2):
    logger.info("Making VXLAN links between %s and %s" % (node1.name, node2.name))
    networkName = overlay_config.tenant_name + '-net'

    node1IP = node1.networks.get(networkName)[0]
    node1SSH = getSSHSession(node1IP, 'ubuntu', 'savi')

    node2IP = node2.networks.get(networkName)[0]
    node2SSH = getSSHSession(node2IP, 'ubuntu', 'savi')

    # Ensure OVS daemon is up and running in both nodes
    waitUntilOVSActive(node1SSH)
    waitUntilOVSActive(node2SSH)

    # STUDENTS FILL THIS PART OUT
    vxlanId = generateVNI()     # get a unique vxlan id
    node1name = node1.name[node1.name.find('-')+1:]
    node2name = node2.name[node2.name.find('-')+1:]
    ovsName = "br1"
    # create a vxlan interface on node1
    ifaceName = "vxlan-%s-%s" % (node1name, node2name)
    cmd = "sudo ovs-vsctl add-port %s %s -- set interface %s type=vxlan options:remote_ip=%s options:key=%d" % (ovsName, ifaceName, ifaceName, node2IP, vxlanId)
    runCommandOverSSH(node1SSH, cmd)
    # create a vxlan interface on node2
    ifaceName = "vxlan-%s-%s" % (node2name, node1name)
    cmd = "sudo ovs-vsctl add-port %s %s -- set interface %s type=vxlan options:remote_ip=%s options:key=%d" % (ovsName, ifaceName, ifaceName, node1IP, vxlanId)
    runCommandOverSSH(node2SSH, cmd)


def startupController(ctrlVMObj):
    logger.info("Accessing controller VM %s to update controller code" % ctrlVMObj.name)
    networkName = overlay_config.tenant_name + '-net'

    ctrlVMIP = ctrlVMObj.networks.get(networkName)[0]
    # ctrlSSH = getSSHSession(ctrlVMIP, 'ubuntu', 'ece361')

    # cmd = "ece361-update"   # update the controller code
    # runCommandOverSSH(ctrlSSH, cmd)

    # logger.info("Starting up Ryu OpenFlow controller at %s" % ctrlVMObj.name)
    # cmd = "ece361-start-controller switch"
    # runCommandOverSSH(ctrlSSH, cmd) # start up the Ryu OpenFlow controller

    overlay_config.contr_addr = ctrlVMIP + ':6633'

################################################################################
# PRIMARY FUNCTIONS (CALLED FROM MAIN, TO BE COMPLETED BY STUDENTS)
################################################################################

# Deploys the overlay topology specified within the overlay_config.py file
# This involves:
#   - Booting up the VMs
#   - Configuring VMs intended as the overlay hosts
#   - Interconnecting everything using OVS's VXLAN capabilities
def deployOverlay():
    print "In deployOverlay()"

    # Dictionaries to map switch/host names to their Nova VM objects
    createdSwitches = {}
    createdHosts = {}

    # STUDENTS FILL THIS PART OUT
    # create a controller VM
    # ctrl_vm = bootVM("myvm", isController=True)
    # startupController(ctrl_vm)
    # logger.info("Started controller at %s" % overlay_config.contr_addr)

    # create a VM for each switch and host
    for sw in overlay_config.topology:
        sw_vm = bootVM(sw)
        createdSwitches[sw] = sw_vm
        setOverlayInterface(sw_vm, None)    # create an OVS instance in VM
        
        for other in overlay_config.topology[sw]:
            if isinstance(other, tuple):    # if sw connected to a host
                hostname = other[0]
                if hostname not in createdHosts:    # create the host if it's not already created
                    host_vm = bootVM(hostname)
                    createdHosts[hostname] = host_vm
                    setOverlayInterface(host_vm, other[1])    # create an OVS instance in VM

    # make vxlan connections between switches and hosts
    for sw in overlay_config.topology:
        sw_vm = createdSwitches[sw]
        setController(sw_vm, overlay_config.contr_addr) # set external controller for the switch

        for other in overlay_config.topology[sw]:
            if isinstance(other, tuple):    # if sw connected to a host
                hostname = other[0]
                host_vm = createdHosts[hostname]
                connectNodes(sw_vm, host_vm)
            else:   # if sw connected to another switch
                other_vm = createdSwitches[other]
                connectNodes(sw_vm, other_vm)

    # create a VM
    # vmname = "myvmhh"
    # vm1 = bootVM(vmname)
    # # find a VM
    # nova = getNovaClient()
    # vm1 = nova.servers.find(name=overlay_config.username +'-'+ vmname)
    # setOverlayInterface(vm1, '192.168.200.10')


# Lists any VM that starts with your username and a dash
# Example: If your username is netsoft50 and a VM is named netsoft50-h1, it
#          gets listed. But if it's netsoft50h1, ignore it.
#
# Expected output format should conform to the following format:
#   <VM Name>: <VM UUID> (<VM Underlay IP>)
#
# Example:
#   netsoft50-h1: 8563c070-bddc-48c8-ba0f-1fd882ec47a1 (10.12.69.4)
def listOverlay():
    print "In listOverlay()"

    # STUDENTS FILL THIS PART OUT
    networkName = overlay_config.tenant_name + '-net'
    nova = getNovaClient()
    # print(inspect.getsource(novaclient.v1_1.servers.Server))
    # vm = nova.servers.list()[0]
    # print(dir(vm))

    hasServer = False
    for vm in nova.servers.list():
        if vm.name.startswith(overlay_config.username + '-'):   # if vm belongs to the overlay network
            vm_ip = vm.networks.get(networkName)[0] # underlay IP of the VM
            print("{}:\t{}\t({})".format(vm.name, vm.id, vm_ip))
            hasServer = True

    if not hasServer:
        print("No VM belongs to the overlay network.")

# Just cleans up any VM that starts with your username and a dash
# Example: If your username is netsoft50 and a VM is named netsoft50-h1, it
#          gets deleted. But if it's netsoft50h1, ignore it.
def cleanupOverlay():
    print "In cleanupOverlay()"

    # STUDENTS FILL THIS PART OUT
    nova = getNovaClient()
    for vm in nova.servers.list():
        if vm.name.startswith(overlay_config.username + '-'):   # if vm belongs to the overlay network
            logger.info("Deleting VM %s" % vm.name)
            vm.delete()


def printHelp():
    print "Usage: ./saviOverlay [subcommand]"
    print "\tTo print this help message again, run: ./saviOverlay help"
    print "\tTo deploy a topology, run: ./saviOverlay deploy"
    print "\tTo list existing VMs from past deployments, run: ./saviOverlay list"
    print "\tTo clean up old topology nodes, run: ./saviOverlay cleanup"
    return

if __name__ == "__main__":
    SUBCOMMANDS = ('help', 'deploy', 'list', 'cleanup')

    if len(sys.argv) > 2:
        print "ERROR: Incorrect # of args"
        print
        printHelp()
        sys.exit();
    else:
        if len(sys.argv) == 2:
            if sys.argv[1] not in SUBCOMMANDS:
                print "ERROR: Unknown subcommand argument."
                print "       Currently subaccepted commands are: %s" % str(SUBCOMMANDS).strip('()')
                print
                printHelp()
                sys.exit();

    if len(sys.argv) == 1:
        # Called with no arguments
        printHelp()
    elif len(sys.argv) == 2:
        if sys.argv[1] == "help":
            printHelp()
        elif sys.argv[1] == "deploy":
            deployOverlay()
        elif sys.argv[1] == "list":
            listOverlay()
        elif sys.argv[1] == "cleanup":
            cleanupOverlay()            

    sys.exit();

